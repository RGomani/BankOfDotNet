============IdentityServer4

* Is a framework that is built on top of OpenID Connect and OAuth 2.0 for ASP.NET CORE 2.0

============Authentication as a service

* You can have your web application, your native applications, your mobile apps, your web services,
web APIs develop separately or hosted separately.  However, they can use the same authentication 
service such as IdentityServer4
* You don't need to reinvent or recreate your authentication code on top of each application
or each service.  You can have a centralized log-in or workflow in one place.

============Single Sign On (SSO)

* If you have everything centralized, you can have multiple applications and application type
that can log-in/log-out in a centralized placed.

============API's to have Access Control

* You can have various API's that are registered through the Identity Server and make themselves use
the Identity Server to make calls to other servers like server-to-server, it can have web apps
calling servers or web apis, it can have single-page applications that are javascript framework
based, and also your native mobile apps they can also be secured and given control and all of the 
permissions and access control can be registered through the IdentityServer4

============Other Names For IdentityServer4:

1. Secure Token Service (STS)
2. Identity Provider
3. Auth Server

============Keep In Mind IdentityServer4 Is....

* Centralized authentication 
* Authentication as a service where you can register users, clients, and any apps to make it 
secure in a centralized location 

============When launching the IdentityServer

1. A console application will be shown with some "info"
2. Run the discovery file/landing page for the clients to know what APIs, grant types, scopes are allowed by using the URL
http://localhost:5000/.well-known/openid-configuration

============To secure the BankOfDotNet.API

1. Add the package IdentityServer4.AccessTokenValidation to the BankOfDotNet.API project.  This package
helps you to add authentication handler and they will help us take our BankOfDotNet.IdentityServer authentication
and plug it in as middleware to our API.  That way, any tokens that are incoming, they become validated
and everything gets checked againsts our issuer (BankOfDotNet.IdentityServer).  And also, define through the 
package that the token we are validating is already managed by BankOfDotNet.IdentityServer.  The idea is 
to validate our token and the token is defined to be used by BankOfDotNet.API.

============Creating a Console app that consumes the BankOfDotNet.API

1. We can use a NuGet package IdentityModel and have the client set-up to behind the scene use the built-in packages and libraries
to make a call to BankOfDotNet.IdentityServer, get a token back, and finally use an http client to make calls
to our API.

============RUN THE PROJECTS IN THIS ORDER

1. Set BankOfDotNet.IdentityServer as start-up project.
2. Debug->Run without debugging
3. Set BankOfDotNet.API as start-up project
4. Debug->Run without debugging
5. Select what type of client you want to run by:
	a. Right-click on BankOfDotNet.ConsoleClient -> Debug -> Start new instance, or
	b. Right-click on BankOfDotNet.ConsoleResourceOwner -> Debug -> Start new instance, or
	c. Right-click on BankOfDotNet.MvcClient -> Set as startup project, run the BankOfDotNet.MvcClient 
			profile (NOT IIS Express), and navigate to http://localhost:5003/home/secure.  
			You will be redirected to the IS4 Open-ID Connect login.

